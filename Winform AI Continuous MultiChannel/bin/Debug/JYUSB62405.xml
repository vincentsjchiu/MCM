<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JYUSB62405</name>
    </assembly>
    <members>
        <member name="T:JYUSB62405.JYLogLevel">
            <summary>
            日志级别定义
            </summary>
        </member>
        <member name="F:JYUSB62405.JYLogLevel.DEBUG">
            <summary>
            DEBUG Level指出细粒度信息事件对调试应用程序是非常有帮助的
            </summary>
        </member>
        <member name="F:JYUSB62405.JYLogLevel.INFO">
            <summary>
            INFO level表明 消息在粗粒度级别上突出强调应用程序的运行过程
            </summary>
        </member>
        <member name="F:JYUSB62405.JYLogLevel.WARN">
            <summary>
            WARN level表明会出现潜在错误的情形。
            </summary>
        </member>
        <member name="F:JYUSB62405.JYLogLevel.ERROR">
            <summary>
            ERROR level指出虽然发生错误事件，但仍然不影响系统的继续运行。
            </summary>
        </member>
        <member name="F:JYUSB62405.JYLogLevel.FATAL">
            <summary>
            FATAL level指出每个严重的错误事件将会导致应用程序的退出。
            </summary>
        </member>
        <member name="T:JYUSB62405.JYLog">
            <summary>
            日志打印类，用于在程序逻辑中打印一些日记记录到文件，方便调试程序，
            同时客户使用时如果遇到问题，也可以使能日志打印的功能，方便定位错误的原因
            </summary>
        </member>
        <member name="P:JYUSB62405.JYLog.LogLevel">
            <summary>
            日志等级，默认为ERROR
            </summary>
        </member>
        <member name="F:JYUSB62405.JYLog._logMsgQ">
            <summary>
            用于日志消息缓存的队列，首次调用时初始化
            </summary>
        </member>
        <member name="F:JYUSB62405.JYLog._timerWriteLog">
            <summary>
            轮询日志队列的定时器 
            </summary>
        </member>
        <member name="P:JYUSB62405.JYLog.EnableLog">
            <summary>
            使能日志打印功能
            </summary>
        </member>
        <member name="M:JYUSB62405.JYLog.Print(System.String,System.Object[])">
            <summary>
            写入日志文件,需要定义宏ENABLELOG 或 DEBUG，此方法兼容旧版
            </summary>
            <param name="logMsg">要打印的消息内容</param>
            <param name="args">参数</param>
        </member>
        <member name="M:JYUSB62405.JYLog.Print(JYUSB62405.JYLogLevel,System.String,System.Object[])">
            <summary>
            写入日志文件,需要定义宏ENABLELOG 或 DEBUG
            </summary>
            <param name="logLevel">日志等级</param>
            <param name="logMsg">要打印的消息内容</param>
            <param name="args">参数</param>
        </member>
        <member name="M:JYUSB62405.JYLog.Flush">
            <summary>
            当前缓存中的所有日志写入文件中
            </summary>
        </member>
        <member name="M:JYUSB62405.JYLog.FuncWriteLog(System.Object)">
            <summary>
            轮询日志队列的定时器回调函数
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:JYUSB62405.JYErrorCode">
            <summary>
            错误代码的定义
            </summary>
        </member>
        <member name="F:JYUSB62405.JYErrorCode.NoError">
            <summary>
            无错误
            </summary>
        </member>
        <member name="F:JYUSB62405.JYErrorCode.TimeOut">
            <summary>
            超时
            </summary>
        </member>
        <member name="F:JYUSB62405.JYErrorCode.ErrorParam">
            <summary>
            参数错误
            </summary>
        </member>
        <member name="F:JYUSB62405.JYErrorCode.IncorrectCallOrder">
            <summary>
            调用顺序不正确
            </summary>
        </member>
        <member name="F:JYUSB62405.JYErrorCode.CannotCall">
            <summary>
            当前配置不能调用该方法
            </summary>
        </member>
        <member name="F:JYUSB62405.JYErrorCode.UserBufferError">
            <summary>
            用户缓冲区错误
            </summary>
        </member>
        <member name="F:JYUSB62405.JYErrorCode.BufferOverflow">
            <summary>
            缓冲区溢出
            </summary>
        </member>
        <member name="F:JYUSB62405.JYErrorCode.BufferDownflow">
            <summary>
            缓冲区下溢出
            </summary>
        </member>
        <member name="F:JYUSB62405.JYErrorCode.HardwareResourceReserved">
            <summary>
            硬件资源已被占用
            </summary>
        </member>
        <member name="T:JYUSB62405.JYDriverExceptionPublic">
            <summary>
            驱动常用错误代码枚举定义
            </summary>
        </member>
        <member name="F:JYUSB62405.JYDriverExceptionPublic.UnKnown">
            <summary>
            未知异常
            </summary>
        </member>
        <member name="F:JYUSB62405.JYDriverExceptionPublic.InitializeFailed">
            <summary>
            初始化失败
            </summary>
        </member>
        <member name="F:JYUSB62405.JYDriverExceptionPublic.TimeOut">
            <summary>
            超时
            </summary>
        </member>
        <member name="F:JYUSB62405.JYDriverExceptionPublic.ErrorParam">
            <summary>
            参数错误
            </summary>
        </member>
        <member name="F:JYUSB62405.JYDriverExceptionPublic.IncorrectCallOrder">
            <summary>
            调用顺序不正确
            </summary>
        </member>
        <member name="F:JYUSB62405.JYDriverExceptionPublic.CannotCall">
            <summary>
            当前配置不能调用该方法
            </summary>
        </member>
        <member name="F:JYUSB62405.JYDriverExceptionPublic.UserBufferError">
            <summary>
            用户缓冲区错误
            </summary>
        </member>
        <member name="F:JYUSB62405.JYDriverExceptionPublic.BufferOverflow">
            <summary>
            缓冲区溢出
            </summary>
        </member>
        <member name="F:JYUSB62405.JYDriverExceptionPublic.BufferDownflow">
            <summary>
            缓冲区下溢出
            </summary>
        </member>
        <member name="F:JYUSB62405.JYDriverExceptionPublic.HardwareResourceReserved">
            <summary>
            硬件资源已被占用
            </summary>
        </member>
        <member name="T:JYUSB62405.JYDriverException">
            <summary>
            JY异常类
            </summary>
        </member>
        <member name="P:JYUSB62405.JYDriverException.FollowingException">
            <summary>
            异常链表指针, 指向后一个异常。
            </summary>
        </member>
        <member name="M:JYUSB62405.JYDriverException.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYUSB62405.JYDriverException.#ctor(JYUSB62405.JYDriverExceptionPublic)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYUSB62405.JYDriverException.#ctor(System.String,JYUSB62405.JYDriverExceptionPublic)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYUSB62405.JYDriverException.#ctor(JYUSB62405.JYDriverExceptionPublic,System.String,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="msg">异常描述信息</param>
            <param name="errorCode">内部错误代码，通常是底层驱动返回的原始错误代码，无则默认为0</param>
        </member>
        <member name="M:JYUSB62405.JYDriverException.#ctor(System.Int32,System.String,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="errorCode">内部错误代码，通常是底层驱动返回的原始错误代码，无则默认为0</param>
            <param name="msg">异常描述信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JYUSB62405.JYDriverException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="msg">异常描述信息</param>
            <param name="innerException">导致当前异常的异常。如果 innerException 不为 null，则在处理内部异常的 catch 块中引发当前异常。</param>
            <param name="errorCode">内部错误代码，通常是底层驱动返回的原始错误代码，无则默认为0</param>
        </member>
        <member name="F:JYUSB62405.JYDriverException.ErrorCode">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="T:JYUSB62405.JYDriverThreadExceptionManager">
            <summary>
            线程抛出异常管理类
            </summary>
        </member>
        <member name="F:JYUSB62405.JYDriverThreadExceptionManager._headException">
            <summary>
            异常链表头指针。收集非主线程产生的异常并链接成链表，在调用Stop()方法时将这些异常反馈给用户。
            </summary>
        </member>
        <member name="F:JYUSB62405.JYDriverThreadExceptionManager._currentException">
            <summary>
            异常链表当前节点
            </summary>
        </member>
        <member name="M:JYUSB62405.JYDriverThreadExceptionManager.ClearThreadExceptions">
            <summary>
            清除非主线程产生的异常
            </summary>
        </member>
        <member name="M:JYUSB62405.JYDriverThreadExceptionManager.ReportThreadExceptions">
            <summary>
            报告异常
            </summary>
        </member>
        <member name="M:JYUSB62405.JYDriverThreadExceptionManager.AppendThreadException(JYUSB62405.JYDriverException)">
            <summary>
            将异常添加到异常变量
            </summary>
            <param name="e">异常对象</param>
            <remarks>
            若使用 
            <code> (DaqTaskException)Activator.CreateInstance(e.GetType(), e.Message, _currentException);</code>
            , 虽不必使用FollowingException属性, 但 e.InnerException 信息将丢失.
            </remarks>
        </member>
        <member name="T:JYUSB62405.WaitEvent">
            <summary>
            等待事件类
            </summary>
        </member>
        <member name="P:JYUSB62405.WaitEvent.Event">
            <summary>
            AutoResetEvent事件对象
            </summary>
        </member>
        <member name="P:JYUSB62405.WaitEvent.ConditionHandler">
            <summary>
            执行此操作，返回值为true时，发出（Set）事件（Event）；否则不发出事件。
            </summary>
        </member>
        <member name="P:JYUSB62405.WaitEvent.IsEnabled">
            <summary>
            事件是否处于被等待状态
            </summary>
        </member>
        <member name="M:JYUSB62405.WaitEvent.#ctor(System.Func{System.Boolean})">
            <summary>
            创建等待事件对象
            </summary>
            <param name="conditionHandler">事件触发条件</param>
        </member>
        <member name="M:JYUSB62405.WaitEvent.EnqueueWait(System.Collections.Generic.Queue{JYUSB62405.WaitEvent},System.Int32)">
            <summary>
            <para>加入事件队列，并等待一段时间，判断事件是否触发。</para>
            <para>若检测到ConditionHandler()或者timeout为0，立即返回，不使用Event.</para>
            </summary>
            <param name="evQueue">事件队列</param>
            <param name="timeout">超时时间(单位:ms)</param>
            <returns>
            <para>true---触发条件满足</para>
            <para>false---触发条件不满足</para>
            </returns>
        </member>
        <member name="M:JYUSB62405.WaitEvent.Wait(System.Int32)">
            <summary>
            等待一段时间，判断事件是否发出。（不加入事件队列）
            若检测到ConditionHandler()或者timeout为0，立即返回，不使用Event.
            </summary>
            <param name="timeout">超时时间(单位:ms)</param>
            <returns>
            <para>true---触发条件满足</para>
            <para>false---触发条件不满足</para>
            </returns>
        </member>
        <member name="M:JYUSB62405.WaitEvent.Set">
            <summary>
            触发事件
            </summary>
            <returns></returns>
        </member>
        <member name="T:JYUSB62405.CircularBuffer`1">
            <summary>
            循环缓冲队列类，旧版本，托管内存
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="P:JYUSB62405.CircularBuffer`1.NumOfElement">
            <summary>
            当前的元素个数
            </summary>
        </member>
        <member name="P:JYUSB62405.CircularBuffer`1.BufferSize">
            <summary>
            缓冲区的大小
            </summary>
        </member>
        <member name="P:JYUSB62405.CircularBuffer`1.CurrentCapacity">
            <summary>
            当前能容纳的点数
            </summary>
        </member>
        <member name="M:JYUSB62405.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="bufferSize"></param>
        </member>
        <member name="M:JYUSB62405.CircularBuffer`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYUSB62405.CircularBuffer`1.AdjustSize(System.Int32)">
            <summary>
            调整缓冲区大小，数据会被清空
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:JYUSB62405.CircularBuffer`1.Clear">
            <summary>
            清空缓冲区内的数据
            </summary>
        </member>
        <member name="M:JYUSB62405.CircularBuffer`1.Enqueue(`0)">
            <summary>
            向缓冲队列中放入一个数据
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:JYUSB62405.CircularBuffer`1.Enqueue(`0[])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYUSB62405.CircularBuffer`1.Enqueue(`0[],System.Int32)">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYUSB62405.CircularBuffer`1.Enqueue(`0[0:,0:])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYUSB62405.CircularBuffer`1.Dequeue(`0@)">
            <summary>
            从缓冲队列中取一个数据
            </summary>
            <returns>失败：-1，1：返回一个数据</returns>
        </member>
        <member name="M:JYUSB62405.CircularBuffer`1.Dequeue(`0[]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="M:JYUSB62405.CircularBuffer`1.Dequeue(`0[0:,0:]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="T:JYUSB62405.WinAPI">
            <summary>
            windows api 的函数导入
            </summary>
        </member>
        <member name="T:JYUSB62405.BufferQueue`1">
            <summary>
            缓冲队列类（托管内存固定）该类效率较低，不推荐使用
            </summary>
        </member>
        <member name="T:JYUSB62405.BufferQueue`1.CDataInfo">
            <summary>
            存放数据信息的类
            </summary>
        </member>
        <member name="P:JYUSB62405.BufferQueue`1.CDataInfo.Count">
            <summary>
            数据点数
            </summary>
        </member>
        <member name="P:JYUSB62405.BufferQueue`1.CDataInfo.ElemType">
            <summary>
            数据元素类型
            </summary>
        </member>
        <member name="P:JYUSB62405.BufferQueue`1.CDataInfo.RDIndex">
            <summary>
            读指针位置
            </summary>
        </member>
        <member name="P:JYUSB62405.BufferQueue`1.CDataInfo.DataPtr">
            <summary>
            数据指针
            </summary>
        </member>
        <member name="P:JYUSB62405.BufferQueue`1.CDataInfo.DataArray">
            <summary>
            数据数组
            </summary>
        </member>
        <member name="F:JYUSB62405.BufferQueue`1.CDataInfo._dataGCHandle">
            <summary>
            GC Handle 
            </summary>
        </member>
        <member name="M:JYUSB62405.BufferQueue`1.CDataInfo.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYUSB62405.BufferQueue`1.CDataInfo.IncIdx(System.Int32)">
            <summary>
            递增读指针
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:JYUSB62405.BufferQueue`1.CDataInfo.Dispose">
            <summary>
            全部释放
            </summary>
        </member>
        <member name="F:JYUSB62405.BufferQueue`1._dataQ">
            <summary>
            用于数据缓存的队列，首次调用时初始化
            </summary>
        </member>
        <member name="M:JYUSB62405.BufferQueue`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:JYUSB62405.BufferQueue`1.NumOfElement">
            <summary>
            当前的元素个数
            </summary>
        </member>
        <member name="M:JYUSB62405.BufferQueue`1.Clear">
            <summary>
            清空队列内的数据
            </summary>
        </member>
        <member name="M:JYUSB62405.BufferQueue`1.Enqueue(`0[])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYUSB62405.BufferQueue`1.Enqueue(`0[],System.Int32)">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYUSB62405.BufferQueue`1.Enqueue(`0[0:,0:])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYUSB62405.BufferQueue`1.Dequeue(`0[]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="M:JYUSB62405.BufferQueue`1.Dequeue(`0[0:,0:]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="T:JYUSB62405.BufferQueueEx`1">
            <summary>
            缓冲队列类（非托管内存）该类效率较低，不推荐使用
            </summary>
        </member>
        <member name="T:JYUSB62405.BufferQueueEx`1.CDataInfo">
            <summary>
            存放数据信息的类
            </summary>
        </member>
        <member name="P:JYUSB62405.BufferQueueEx`1.CDataInfo.Count">
            <summary>
            数据点数
            </summary>
        </member>
        <member name="P:JYUSB62405.BufferQueueEx`1.CDataInfo.ElemType">
            <summary>
            数据元素类型
            </summary>
        </member>
        <member name="P:JYUSB62405.BufferQueueEx`1.CDataInfo.RDIndex">
            <summary>
            读指针位置
            </summary>
        </member>
        <member name="P:JYUSB62405.BufferQueueEx`1.CDataInfo.DataPtr">
            <summary>
            数据指针
            </summary>
        </member>
        <member name="M:JYUSB62405.BufferQueueEx`1.CDataInfo.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYUSB62405.BufferQueueEx`1.CDataInfo.IncIdx(System.Int32)">
            <summary>
            递增读指针
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:JYUSB62405.BufferQueueEx`1.CDataInfo.Dispose">
            <summary>
            全部释放
            </summary>
        </member>
        <member name="F:JYUSB62405.BufferQueueEx`1._dataQ">
            <summary>
            用于数据缓存的队列，首次调用时初始化
            </summary>
        </member>
        <member name="M:JYUSB62405.BufferQueueEx`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:JYUSB62405.BufferQueueEx`1.NumOfElement">
            <summary>
            当前的元素个数
            </summary>
        </member>
        <member name="M:JYUSB62405.BufferQueueEx`1.Clear">
            <summary>
            清空队列内的数据
            </summary>
        </member>
        <member name="M:JYUSB62405.BufferQueueEx`1.Enqueue(`0[])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYUSB62405.BufferQueueEx`1.Enqueue(`0[],System.Int32)">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYUSB62405.BufferQueueEx`1.Enqueue(`0[0:,0:])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYUSB62405.BufferQueueEx`1.Dequeue(`0[]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="M:JYUSB62405.BufferQueueEx`1.Dequeue(`0[0:,0:]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="T:JYUSB62405.CircularBufferEx`1">
            <summary>
            循环缓冲队列扩展类（非托管内存），主要用于实现循环缓冲链，该类较高，推荐使用，但跨平台需要重新修改
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="F:JYUSB62405.CircularBufferEx`1._sizeOfT">
            <summary>
            T的Size，创建队列的时候初始化
            </summary>
        </member>
        <member name="F:JYUSB62405.CircularBufferEx`1._bufferPtr">
            <summary>
            缓冲区的指针首地址
            </summary>
        </member>
        <member name="F:JYUSB62405.CircularBufferEx`1._WRIdx">
            <summary>
            队列写指针
            </summary>
        </member>
        <member name="F:JYUSB62405.CircularBufferEx`1._RDIdx">
            <summary>
            队列读指针
            </summary>
        </member>
        <member name="P:JYUSB62405.CircularBufferEx`1.NumOfElement">
            <summary>
            当前的元素个数
            </summary>
        </member>
        <member name="P:JYUSB62405.CircularBufferEx`1.BufferSize">
            <summary>
            缓冲区的大小
            </summary>
        </member>
        <member name="P:JYUSB62405.CircularBufferEx`1.CurrentCapacity">
            <summary>
            当前能容纳的点数
            </summary>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="bufferSize"></param>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.Dispose">
            <summary>
            释放循环缓冲区
            </summary>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.Clear">
            <summary>
            清空循环缓冲区的数据
            </summary>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.Finalize">
            <summary>
            析构函数，避免非托管内存没有释放
            </summary>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.Enqueue(`0[])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.Enqueue(`0[],System.Int32)">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.Enqueue(`0[],System.Int32,System.Int32)">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.Enqueue(`0[0:,0:])">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.Enqueue(`0[0:,0:],System.Int32,System.Int32)">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.Enqueue(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            向缓冲队列中放入一组数据
            </summary>
            <param name="dataPtr">数据首地址</param>
            <param name="srcIdx">数据开始的索引（以元素为单位，非字节单位）</param>
            <param name="len">数据长度（以元素为单位，非字节单位）</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.Dequeue(`0[]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.Dequeue(`0[]@,System.Int32,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.Dequeue(`0[0:,0:]@,System.Int32,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.Dequeue(`0[0:,0:]@,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBuffer">请求读取缓冲区</param>
            <returns>返回实际取到的数据长度</returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferEx`1.Dequeue(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            从缓冲队列中取出指定长度的数据
            </summary>
            <param name="reqBufferPtr">请求数据的首地址</param>
            <param name="dstIdx">目标数据的开始索引（以元素为单位，非字节单位）</param>
            <param name="len">出队数据的长度（以元素为单位，非字节单位）</param>
            <returns></returns>
        </member>
        <member name="T:JYUSB62405.CircularBufferList`1">
            <summary>
            <para>循环缓冲链类，将CircularBufferEx链起来</para>
            <para>优点：不用预先分配较大的内存，当程序运行时不够用了再按块增加</para>
            <para>使用注意：块大小要合适，不能太小，也不能太大。</para>
            <para>----太小：增加内存拷贝的次数，消耗CPU资源；</para>
            <para>----太大：增加内存占用。</para>
            <para>推荐分配块大小为入队和出队数据量的4~16倍</para>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:JYUSB62405.CircularBufferList`1._numOfElement">
            <summary>
            元素个数计数
            </summary>
        </member>
        <member name="P:JYUSB62405.CircularBufferList`1.NumOfElement">
            <summary>
            当前元素个数
            </summary>
        </member>
        <member name="P:JYUSB62405.CircularBufferList`1.CurrentCapacity">
            <summary>
            当前缓冲区容量
            </summary>
        </member>
        <member name="F:JYUSB62405.CircularBufferList`1._blockSize">
            <summary>
            块大小
            </summary>
        </member>
        <member name="F:JYUSB62405.CircularBufferList`1._lstCircleBuffer">
            <summary>
            循环缓冲链表
            </summary>
        </member>
        <member name="F:JYUSB62405.CircularBufferList`1._RDBlockIdx">
            <summary>
            读写索引
            </summary>
        </member>
        <member name="F:JYUSB62405.CircularBufferList`1._WRBlockIdx">
            <summary>
            读写索引
            </summary>
        </member>
        <member name="F:JYUSB62405.CircularBufferList`1._LastBlockCount">
            <summary>
            上一次Dequeue后的块数
            </summary>
        </member>
        <member name="F:JYUSB62405.CircularBufferList`1._firstDequeueFlag">
            <summary>
            第一次Dequeue后标志为false
            </summary>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="blockSize"></param>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.Clear">
            <summary>
            清空循环缓冲区的数据
            </summary>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.Dispose">
            <summary>
            释放循环缓冲区
            </summary>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.Finalize">
            <summary>
            析构函数，避免非托管内存没有释放
            </summary>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.Enqueue(`0[])">
            <summary>
            数据入队
            </summary>
            <param name="elems">入队的数据源数组</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.Enqueue(`0[],System.Int32,System.Int32)">
            <summary>
            数据入队，带数据源的开始索引
            </summary>
            <param name="elems">入队的数据源数组</param>
            <param name="srcIdx">数据源的开始索引</param>
            <param name="len">入队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.Enqueue(`0[],System.Int32)">
            <summary>
            数据入队，不带数据源的开始索引
            </summary>
            <param name="elems">入队的数据源数组</param>
            <param name="len">入队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.Enqueue(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            数据入队，带数据源的开始索引
            </summary>
            <param name="elemsPtr">入队的数据源数组地址</param>
            <param name="srcIdx">数据源的开始索引（以元素为单位，非字节）</param>
            <param name="len">入队的数据长度（以元素为单位，非字节）</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.Enqueue(`0[0:,0:],System.Int32,System.Int32)">
            <summary>
            数据入队，带数据源的开始索引
            </summary>
            <param name="elems">入队的数据源数组</param>
            <param name="srcIdx">数据源的开始索引</param>
            <param name="len">入队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.Enqueue(`0[0:,0:],System.Int32)">
            <summary>
            数据入队，不带数据源的开始索引
            </summary>
            <param name="elems">入队的数据源数组</param>
            <param name="len">入队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.Dequeue(`0[]@)">
            <summary>
            数据出队
            </summary>
            <param name="retBuffer">请求出队的目标数组</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.Dequeue(`0[]@,System.Int32,System.Int32)">
            <summary>
            数据出队，带目标数组的开始索引
            </summary>
            <param name="retBuffer">请求出队的目标数组</param>
            <param name="dstIdx">目标数组的开始索引</param>
            <param name="len">出队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.Dequeue(`0[]@,System.Int32)">
            <summary>
            数据出队，不带目标数组的开始索引
            </summary>
            <param name="retBuffer">请求出队的目标数组</param>
            <param name="len">出队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.Dequeue(`0[0:,0:]@,System.Int32,System.Int32)">
            <summary>
            数据出队，带目标数组的开始索引
            </summary>
            <param name="retBuffer">请求出队的目标数组</param>
            <param name="dstIdx">目标数组的开始索引</param>
            <param name="len">出队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.Dequeue(`0[0:,0:]@,System.Int32)">
            <summary>
            数据出队，不带目标数组的开始索引
            </summary>
            <param name="retBuffer">请求出队的目标数组</param>
            <param name="len">出队的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.CircularBufferList`1.Dequeue(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            数据出队，带目标数组的开始索引
            </summary>
            <param name="retBufferPtr">请求出队的目标数组地址</param>
            <param name="dstIdx">目标数组的开始索引（以元素为单位，非字节）</param>
            <param name="len">出队的数据长度（以元素为单位，非字节）</param>
            <returns></returns>
        </member>
        <member name="T:JYUSB62405.JYUSB62405Device">
            <summary>
            定义DSA专用的函数等
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405Device.CardType">
            <summary>
            卡的类型，在实例化类对象时根据Device model初始化为对应的类型
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405Device.BoardClkRate">
            <summary>
            板载时钟
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405Device.DiffChannelCount">
            <summary>
            差分或伪差分通道数
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405Device.MaxSampleRateSingleChannel">
            <summary>
            单通道最大采样率
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405Device.MinSampleRateSingleChannel">
            <summary>
            单通道最大采样率
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405Device.IsAISync">
            <summary>
            是否是同步采集卡
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405Device._cardnumber">
            <summary>
            板卡编号，构造此类对象时的入参
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405Device._listThisInst">
            <summary>
            用于保存每个cardnumber构造出的实例
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405Device._cardID">
            <summary>
            调用Register后得到的cardID
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405Device.AIDBFBlockSize">
            <summary>
            AI double buffer缓冲区的blocksize
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405Device.AINDBFBlockSize">
            <summary>
            AI non double buffer缓冲区的blocksize
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405Device.AIReserved">
            <summary>
            AI是否已经占用的标志
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405Device.DIOLineReserved">
            <summary>
            DI端口及其线是否被占用
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405Device.wPartCfg">
            <summary>
            资源配置1
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405Device.GetInstance(System.UInt16)">
            <summary>
            根据board number获取操作实例,保证每张板卡只有一个注册实例
            </summary>
            <param name="cardNum"></param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405Device.#ctor(System.UInt16)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405Device.Release">
            <summary>
            关闭AD设备,禁止传输,并释放资源，该函数自动在类的析构函数中执行
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405Device.Finalize">
            <summary>
            析构函数，释放硬件资源
            </summary>
        </member>
        <member name="T:JYUSB62405.JYUSB62405AITask">
            <summary>
            AI采集任务类,是Sealed类，不可被继承
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.#ctor(System.Int32)">
            <summary>
            This creates AI task.  
            User supplies , sample rates and samples per channel , AIMode , AIClkSrc , clkEdge , triggerType
            Some defaults:sampleRate = 1000 , samplesPerChannel = 1024
            Finite Model, Internal clock source; Immediate trigger
            Finite acquisition, internal source clock, rising edge, immediate triggering
            </summary>
            <param name="boardNum">Hardware boardNum</param>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._devHandle">
            <summary>
            操作硬件的对象
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._aiStarted">
            <summary>
            AI是否已启动
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._localBuffer">
            <summary>
            本地缓冲内存
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._taskDone">
            <summary>
            任务结束标志 
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._channelsArray">
            <summary>
            通道数组，申明了N个固定的数组，有多少个通道对应使用哪一个一维数组
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._rangesArray">
            <summary>
            量程数组
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._channelValuesArray">
            <summary>
            单通道Value的数组
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._waitUntilDoneEvent">
            <summary>
            WaitUntilDone等待事件
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._enableAIDbfMode">
            <summary>
            AI是否使能了Double Buffer模式
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._AIDoubleBuffSize">
            <summary>
            AI硬件双缓冲区的大小
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._AIReadbuffer_alignment">
            <summary>
            AI读缓冲区（对齐地址）
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._AIReadbuffer">
            <summary>
            AI读缓冲区（非对齐地址）
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._waitLock">
            <summary>
            等待锁, 用于限制多线程并行读操作. 需要等一个线程读取完成后, 另一个线程才能读(排队).
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405AITask.EventQueue">
            <summary>
            事件队列。调用WaitUntilDone()或者ReadBuffer()时，使用事件通知方式，提高效率。
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._isOverflow">
            <summary>
            缓冲区是否溢出标志
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._readyCount">
            <summary>
            用于有限次重触发，读取缓冲区数据的offset标记
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405AITask._enableRetrigger">
            <summary>
            是否使能重触发
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405AITask.Channels">
            <summary>
            通道列表
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405AITask.Mode">
            <summary>
            采集模式，支持Single/Finite/Continuous三种类型
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405AITask.SampleRate">
            <summary>
            每通道采样率
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405AITask.SamplesToAcquire">
            <summary>
            有限点采集时, 每通道采集的样点数。若设置为小于0，则采集无穷个点。
            <para>默认值为256</para>
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405AITask.BufLenInSamples">
            <summary>
            缓冲区能容纳的每通道样点数。一次读取的样点数不能超过此容量。        
            <remarks>在调用 Start() 方法后分配或者调整缓冲区。</remarks>
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405AITask.AvailableSamples">
            <summary>
            缓冲区内可以读取的点数
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405AITask.ClkSource">
            <summary>
            时钟源,需要根据不同厂商驱动的规定去修改EnumClkSrc枚举
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405AITask.ClockEdge">
            <summary>
            时钟沿。仅在外部时钟时有效。
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405AITask.Trigger">
            <summary>
            AI触发参数设置
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.AddChannel(System.Int32,System.Double,System.Double,JYUSB62405.Coupling,JYUSB62405.AITerminal,System.Boolean)">
            <summary>
            添加通道
            </summary>
            <param name="channelID">通道物理序号</param>
            <param name="rangeLow">通道量程下限</param>
            <param name="rangeHigh">通道量程上限</param>
            <param name="coupling">耦合方式</param>
            <param name="terminal">端口输入模式配置</param>
            <param name="enableIEPE">使能IEPE激励</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.AddChannel(System.Int32[],System.Double,System.Double,JYUSB62405.Coupling,JYUSB62405.AITerminal,System.Boolean)">
            <summary>
            添加多通道
            </summary>
            <param name="channelsID">要添加通道的所有物理序号</param>
            <param name="rangeLow">通道量程下限</param>
            <param name="rangeHigh">通道量程上限</param>
            <param name="coupling">耦合方式</param>
            <param name="terminal">端口输入模式配置</param>
            <param name="enableIEPE">使能IEPE激励</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.AddChannel(System.Int32[],System.Double[],System.Double[],JYUSB62405.Coupling,JYUSB62405.AITerminal,System.Boolean)">
            <summary>
            添加多通道,每通道量程可设置不同
            </summary>
            <param name="channelsID">要添加通道的所有物理序号</param>
            <param name="rangeLow">通道量程下限</param>
            <param name="rangeHigh">通道量程上限</param>
            <param name="coupling">耦合方式</param>
            <param name="terminal">端口输入模式配置</param>
            <param name="enableIEPE">使能IEPE激励</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.RemoveChannel(System.Int32)">
            <summary>
            删除指定通道号的通道,为-1则删除所有通道
            </summary>
            <param name="channelID">要删除的通道的通道号</param>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.ReadData(System.Double[0:,0:]@,System.Int32)">
            <summary>
            读取数据，按列返回采集到的电压值
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="timeout">当数据不足时，最多等待的时间（单位：ms）</param>   
            <remarks>
            <list type="bullet">
            <item>若缓冲区内可读取数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若任务已结束，则直接读取缓冲区内的剩余数据；否则，参考下一条。</item>
            <item>等待数据，在timeout时间内，若数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若等待timeout时间后，缓冲区数据量仍未达到SamplesPerChannel，则抛出超时异常；抛出异常前，依据Deterministic的值，若为false，则读取缓冲区内的所有数据，否则不读取数据。</item>
            </list>
            </remarks>
            <returns>
            小于0：实际错误代码
            大于0：实际读到的每通道点数
            </returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.ReadData(System.Double[0:,0:]@,System.Int32,System.Int32)">
            <summary>
            读取数据，按列返回采集到的电压值
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="samplesPerChannel">用户缓冲区能容纳的每通道样点数</param>
            <param name="timeout">当数据不足时，最多等待的时间（单位：ms）</param>      
            <remarks>
            <list type="bullet">
            <item>若缓冲区内可读取数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若任务已结束，则直接读取缓冲区内的剩余数据；否则，参考下一条。</item>
            <item>等待数据，在timeout时间内，若数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若等待timeout时间后，缓冲区数据量仍未达到SamplesPerChannel，则抛出超时异常；抛出异常前，依据Deterministic的值，若为false，则读取缓冲区内的所有数据，否则不读取数据。</item>
            </list>
            </remarks>
            <returns>
            小于0：实际错误代码
            大于0：实际读到的每通道点数
            </returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.ReadData(System.Double[]@,System.Int32)">
            <summary>
            读取数据，按列返回采集到的电压值
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="timeout">当数据不足时，最多等待的时间（单位：ms）</param>
            <remarks>
            <list type="bullet">
            <item>若缓冲区内可读取数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若任务已结束，则直接读取缓冲区内的剩余数据；否则，参考下一条。</item>
            <item>等待数据，在timeout时间内，若数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若等待timeout时间后，缓冲区数据量仍未达到SamplesPerChannel，则抛出超时异常；抛出异常前，依据Deterministic的值，若为false，则读取缓冲区内的所有数据，否则不读取数据。</item>
            </list>        
            </remarks>
            <returns>
            小于0：实际错误代码
            大于0：实际读到的每通道点数
            </returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.ReadData(System.Double[]@,System.Int32,System.Int32)">
            <summary>
            读取数据，按列返回采集到的电压值
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="samplesPerChannel">用户缓冲区能容纳的每通道样点数</param>
            <param name="timeout">当数据不足时，最多等待的时间（单位：ms）</param>
            <remarks>
            <list type="bullet">
            <item>若缓冲区内可读取数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若任务已结束，则直接读取缓冲区内的剩余数据；否则，参考下一条。</item>
            <item>等待数据，在timeout时间内，若数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若等待timeout时间后，缓冲区数据量仍未达到SamplesPerChannel，则抛出超时异常；抛出异常前，依据Deterministic的值，若为false，则读取缓冲区内的所有数据，否则不读取数据。</item>
            </list>        
            </remarks>
            <returns>
            小于0：实际错误代码
            大于0：实际读到的每通道点数
            </returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.ReadRawData(System.Int32[0:,0:]@,System.Int32)">
            <summary>
            读取数据，按列返回采集到的电压值
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="timeout">超时时间</param>  
            <remarks>
            <list type="bullet">
            <item>若缓冲区内可读取数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若任务已结束，则直接读取缓冲区内的剩余数据；否则，参考下一条。</item>
            <item>等待数据，在timeout时间内，若数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若等待timeout时间后，缓冲区数据量仍未达到SamplesPerChannel，则抛出超时异常；抛出异常前，依据Deterministic的值，若为false，则读取缓冲区内的所有数据，否则不读取数据。</item>
            </list>
            <returns>
            小于0：实际错误代码
            大于0：实际读到的每通道点数
            </returns> 
            </remarks>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.ReadRawData(System.Int32[0:,0:]@,System.Int32,System.Int32)">
            <summary>
            读取数据，按列返回采集到的电压值,返回单通道的数据
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="samplesPerChannel">用户缓冲区能容纳的每通道样点数</param>
            <param name="timeout">超时时间</param>  
            <remarks>
            <list type="bullet">
            <item>若缓冲区内可读取数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若任务已结束，则直接读取缓冲区内的剩余数据；否则，参考下一条。</item>
            <item>等待数据，在timeout时间内，若数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若等待timeout时间后，缓冲区数据量仍未达到SamplesPerChannel，则抛出超时异常；抛出异常前，依据Deterministic的值，若为false，则读取缓冲区内的所有数据，否则不读取数据。</item>
            </list>
            </remarks>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.ReadRawData(System.Int32[]@,System.Int32)">
            <summary>
            读取数据，按列返回采集到的电压值
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="timeout">超时时间</param>  
            <remarks>
            <list type="bullet">
            <item>若缓冲区内可读取数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若任务已结束，则直接读取缓冲区内的剩余数据；否则，参考下一条。</item>
            <item>等待数据，在timeout时间内，若数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若等待timeout时间后，缓冲区数据量仍未达到SamplesPerChannel，则抛出超时异常；抛出异常前，依据Deterministic的值，若为false，则读取缓冲区内的所有数据，否则不读取数据。</item>
            </list>
            <returns>
            小于0：实际错误代码
            大于0：实际读到的每通道点数
            </returns> 
            </remarks>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.ReadRawData(System.Int32[]@,System.Int32,System.Int32)">
            <summary>
            读取数据，按列返回采集到的电压值
            </summary>
            <param name="buf">用户缓冲区数组</param>
            <param name="samplesPerChannel">用户缓冲区能容纳的每通道样点数</param>
            <param name="timeout">超时时间</param>  
            <remarks>
            <list type="bullet">
            <item>若缓冲区内可读取数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若任务已结束，则直接读取缓冲区内的剩余数据；否则，参考下一条。</item>
            <item>等待数据，在timeout时间内，若数据量达到SamplesPerChannel，则直接读取数据；否则，参考下一条。</item>
            <item>若等待timeout时间后，缓冲区数据量仍未达到SamplesPerChannel，则抛出超时异常；抛出异常前，依据Deterministic的值，若为false，则读取缓冲区内的所有数据，否则不读取数据。</item>
            </list>
            ///</remarks>
            <returns>
            小于0：实际错误代码
            大于0：实际读到的每通道点数
            </returns> 
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.ReadSinglePoint(System.Double[]@)">
            <summary>
            每通道读取一个样点，非缓冲式读取。返回应用变换系数变换后的数据。
            </summary>
            <param name="buffer">用户缓冲区数组。数组大小须不小于<see cref="!:NumOfChns"/>。</param>
            <returns>
            </returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.ReadSinglePoint(System.Double@)">
            <summary>
            单通道读取一个样点，非缓冲式读取。返回应用变换系数变换后的数据。
            </summary>
            <param name="readValue">用户缓冲区数组。数组大小须不小于<see cref="!:NumOfChns"/>。</param>
            <returns>
            </returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.WaitUntilDone(System.Int32)">
            <summary>
            等待当前任务完成
            </summary>
            <param name="timeout">
            等待的时间(单位:ms)
            <para>若设置为-1，则无限期等待；</para>
            <para>若设置为0，则立即返回检查结果。</para>
            </param>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.Start">
            <summary>
            启动数采任务
            </summary>
            <returns>
            <para>   0: 成功</para>
            <para>-507：内存不足；</para>
            <para>  -1：超时，任务未结束</para>
            <para>-508: API调用次序不符合要求，或者参数异常</para>
            </returns>
            <remarks> 根据配置启动任务</remarks>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.Stop">
            <summary>
            停止数采任务
            </summary>
            <returns>
            <para>   0: 成功</para>
            <para>-507：内存不足；</para>
            <para>  -1：超时，任务未结束</para>
            <para>-508: API调用次序不符合要求，或者参数异常</para>
            </returns>
            <remarks>停止正在执行的任务</remarks>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.ThdAcquireData">
            <summary>
            从缓冲区取数据的线程函数
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.EnQueueElems(System.Int32[])">
            <summary>
            数据放入队列尾部
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.ActivateWaitEvents">
            <summary>
            激活等待事件
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.GetVendorRange(System.Double,System.Double)">
            <summary>
            根据输入范围匹配一个原厂驱动的Range值
            </summary>
            <param name="rangeLow">输入下限</param>
            <param name="rangeHigh">输入上限</param>
            <returns>
            小于0：错误
            大于0：实际的Range
            </returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.AIConfigTrigAndClock">
            <summary>
            AI相关的配置，调用原厂Config函数进行配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.AIChannelConfig">
            <summary>
            通道配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.GetChannelArray">
            <summary>
            获取当前添加通道的数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.GetRangeArray">
            <summary>
            获取当前添加通道的数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.GetNearestOfMBlocksize(System.UInt32,System.UInt32)">
            <summary>
            获取里requestsize最近的Blocksize的整数倍的数
            </summary>
            <param name="requestSize"></param>
            <param name="blockSize"></param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.ConfigContAcq">
            <summary>
            连续采集配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.FetchBuffer(System.Int32[]@,System.Boolean@)">
            <summary>
            从本地缓冲区中取采集的数据
            </summary>
            <param name="retbuffer">取到的数据，多个通道是interleaved的</param>
            <returns>
            小于0：失败，具体看错误代码
            大于0：成功，值代表每通道返回的样点数
            </returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405AITask.ThrowException(System.Int32)">
            <summary>
            异常判断
            </summary>
            <param name="errCode"></param>
        </member>
        <member name="T:JYUSB62405.Coupling">
            <summary>
            耦合方式枚举类型
            </summary>
        </member>
        <member name="F:JYUSB62405.Coupling.AC">
            <summary>
            交流耦合方式
            </summary>
        </member>
        <member name="F:JYUSB62405.Coupling.DC">
            <summary>
            直流耦合方式
            </summary>
        </member>
        <member name="T:JYUSB62405.AIChannel">
            <summary>
            AI通道参数类
            </summary>
        </member>
        <member name="P:JYUSB62405.AIChannel.ChannelID">
            <summary>
            通道号。与AI通道的物理序号相对应。
            </summary>
        </member>
        <member name="P:JYUSB62405.AIChannel.RangeLow">
            <summary>
            通道量程下限
            </summary>
        </member>
        <member name="P:JYUSB62405.AIChannel.RangeHigh">
            <summary>
            通道量程上限
            </summary>
        </member>
        <member name="P:JYUSB62405.AIChannel.Coupling">
            <summary>
            耦合方式
            </summary>
        </member>
        <member name="P:JYUSB62405.AIChannel.Terminal">
            <summary>
            端口模式配置
            </summary>
        </member>
        <member name="P:JYUSB62405.AIChannel.EnableIEPE">
            <summary>
            是否使能IEPE
            </summary>
        </member>
        <member name="M:JYUSB62405.AIChannel.#ctor(System.Int32,System.Double,System.Double,JYUSB62405.Coupling,JYUSB62405.AITerminal,System.Boolean)">
            <summary>
            构造函数，创建AIChnParam对象
            </summary>
            <param name="channelID">通道物理序号</param>
            <param name="rangeLow">通道量程下限</param>
            <param name="rangeHigh">通道量程上限</param>
            <param name="coupling">耦合方式</param>
            <param name="terminal">接线方式</param>
            <param name="enableIEPE">使能IEPE激励</param>
        </member>
        <member name="T:JYUSB62405.AITriggerType">
            <summary>
            AI触发类型，需要根据板卡的实际支持情况修改
            </summary>
        </member>
        <member name="F:JYUSB62405.AITriggerType.Immediate">
            <summary>
            无触发,立即开始采集
            </summary>
        </member>
        <member name="F:JYUSB62405.AITriggerType.Digital">
            <summary>
            数字触发
            </summary>
        </member>
        <member name="F:JYUSB62405.AITriggerType.Analog">
            <summary>
            模拟触发
            </summary>
        </member>
        <member name="T:JYUSB62405.AIClockEdge">
            <summary>
            AI时钟沿类型
            </summary>
        </member>
        <member name="F:JYUSB62405.AIClockEdge.Rising">
            <summary>
            上升沿
            </summary>
        </member>
        <member name="F:JYUSB62405.AIClockEdge.Falling">
            <summary>
            下降沿
            </summary>
        </member>
        <member name="T:JYUSB62405.AITriggerEdge">
            <summary>
            AI触发沿类型
            </summary>
        </member>
        <member name="F:JYUSB62405.AITriggerEdge.Rising">
            <summary>
            上升沿
            </summary>
        </member>
        <member name="F:JYUSB62405.AITriggerEdge.Falling">
            <summary>
            下降沿
            </summary>
        </member>
        <member name="F:JYUSB62405.AITriggerEdge.Low">
            <summary>
            电平信号，低停止,用于暂停触发
            </summary>
        </member>
        <member name="F:JYUSB62405.AITriggerEdge.High">
            <summary>
            电平信号，高停止，用于暂停触发
            </summary>
        </member>
        <member name="T:JYUSB62405.AIDigitalTriggerSource">
            <summary>
            数字触发信号源
            </summary>
        </member>
        <member name="F:JYUSB62405.AIDigitalTriggerSource.GPIO0">
            <summary>
            GPIO0
            </summary>
        </member>
        <member name="T:JYUSB62405.AIAnalogTriggerSource">
            <summary>
            模拟触发信号源
            </summary>
        </member>
        <member name="F:JYUSB62405.AIAnalogTriggerSource.CH0">
            <summary>
            模拟触发通道0
            </summary>
        </member>
        <member name="F:JYUSB62405.AIAnalogTriggerSource.CH1">
            <summary>
            模拟触发通道1
            </summary>
        </member>
        <member name="F:JYUSB62405.AIAnalogTriggerSource.CH2">
            <summary>
            模拟触发通道2
            </summary>
        </member>
        <member name="F:JYUSB62405.AIAnalogTriggerSource.CH3">
            <summary>
            模拟触发通道3
            </summary>
        </member>
        <member name="T:JYUSB62405.AIMode">
            <summary>
            AI工作模式枚举类型
            </summary>
        </member>
        <member name="F:JYUSB62405.AIMode.Single">
            <summary>
            单点方式
            </summary>
        </member>
        <member name="F:JYUSB62405.AIMode.Finite">
            <summary>
            有限点方式
            </summary>
        </member>
        <member name="F:JYUSB62405.AIMode.Continuous">
            <summary>
            连续方式
            </summary>
        </member>
        <member name="T:JYUSB62405.AITerminal">
            <summary>
            输入配置枚举类型
            </summary>
        </member>
        <member name="F:JYUSB62405.AITerminal.Differential">
            <summary>
            差分模式
            </summary>
        </member>
        <member name="F:JYUSB62405.AITerminal.Pseudodifferential">
            <summary>
            伪差分模式
            </summary>
        </member>
        <member name="T:JYUSB62405.AIClockSource">
            <summary>
            时钟源类型
            </summary>
        </member>
        <member name="F:JYUSB62405.AIClockSource.Internal">
            <summary>
            内部时钟源
            </summary>
        </member>
        <member name="F:JYUSB62405.AIClockSource.External">
            <summary>
            外部时钟源
            </summary>
        </member>
        <member name="T:JYUSB62405.AITrigger">
            <summary>
            触发参数
            </summary>
        </member>
        <member name="P:JYUSB62405.AITrigger.Type">
            <summary>
            触发类型，可能包括 Immediate/Software/Digital/Analog
            </summary>
        </member>
        <member name="P:JYUSB62405.AITrigger.Mode">
            <summary>
            AI触发模式，包括Start触发和Reference触发
            </summary>
        </member>
        <member name="P:JYUSB62405.AITrigger.Digital">
            <summary>
            数字触发参数设置
            </summary>
        </member>
        <member name="P:JYUSB62405.AITrigger.Analog">
            <summary>
            模拟触发设置
            </summary>
        </member>
        <member name="P:JYUSB62405.AITrigger.ReTriggerCount">
            <summary>
            重复触发设置,为0时不重复触发，>0时为重复触发次数，-1时为无限次重触发；
            </summary>
        </member>
        <member name="P:JYUSB62405.AITrigger.Delay">
            <summary>
            触发延迟时间设置，为0时不延迟，>0时为延迟ms数；
            </summary>
        </member>
        <member name="P:JYUSB62405.AITrigger.PreTriggerSamples">
            <summary>
            预触发点数，为0时无预触发，>0时为预触发点数；
            </summary>
        </member>
        <member name="M:JYUSB62405.AITrigger.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:JYUSB62405.AITriggerMode">
            <summary>
            触发模式
            </summary>
        </member>
        <member name="F:JYUSB62405.AITriggerMode.Start">
            <summary>
            Start触发
            </summary>
        </member>
        <member name="F:JYUSB62405.AITriggerMode.Reference">
            <summary>
            参考触发
            </summary>
        </member>
        <member name="F:JYUSB62405.AITriggerMode.Pause">
            <summary>
            暂停触发
            </summary>
        </member>
        <member name="T:JYUSB62405.AIDigitalTrigger">
            <summary>
            数字触发参数
            </summary>
        </member>
        <member name="P:JYUSB62405.AIDigitalTrigger.Source">
            <summary>
            AI 数字触发信号源
            </summary>
        </member>
        <member name="P:JYUSB62405.AIDigitalTrigger.Edge">
            <summary>
            AI 数字触发边沿类型，Rising/Falling
            </summary>
        </member>
        <member name="M:JYUSB62405.AIDigitalTrigger.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:JYUSB62405.AIAnalogTrigger">
            <summary>
            模拟触发参数
            </summary>
        </member>
        <member name="P:JYUSB62405.AIAnalogTrigger.Source">
            <summary>
            AI 模拟触发源
            </summary>
        </member>
        <member name="P:JYUSB62405.AIAnalogTrigger.Edge">
            <summary>
            AI 模拟触发条件
            </summary>
        </member>
        <member name="P:JYUSB62405.AIAnalogTrigger.Threshold">
            <summary>
            电平阈值
            </summary>
        </member>
        <member name="M:JYUSB62405.AIAnalogTrigger.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:JYUSB62405.JYUSB62405CITask">
            <summary>
            CI任务
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405CITask.#ctor(System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="boardNum">板卡ID号</param>
            <param name="channelID">计数器编号，0或者1有效</param>
        </member>
        <member name="F:JYUSB62405.JYUSB62405CITask._deviceHandle">
            <summary>
            板卡实例化对象
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405CITask._channel">
            <summary>
            计数器编号
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405CITask._isStart">
            <summary>
            开始标志
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405CITask.Start">
            <summary>
            开始任务
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405CITask.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405CITask.ReadCounter(System.UInt32@)">
            <summary>
            
            </summary>
            <param name="buf"></param>
        </member>
        <member name="T:JYUSB62405.JYUSB62405COTask">
            <summary>
            CO任务
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405COTask.#ctor(System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="boardNum">板卡ID</param>
            <param name="channelID">计数器编号</param>
        </member>
        <member name="F:JYUSB62405.JYUSB62405COTask._deviceHandle">
            <summary>
            板卡对象实例
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405COTask._channel">
            <summary>
            通道
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405COTask._isStart">
            <summary>
            开始标志
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405COTask.SampleToGeneration">
            <summary>
            有限方式下脉冲的产生个数
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405COTask.Frequence">
            <summary>
            输出脉冲频率
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405COTask.Start">
            <summary>
            任务开始
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405COTask.Stop">
            <summary>
            任务停止
            </summary>
        </member>
        <member name="T:JYUSB62405.JYUSB62405DITask">
            <summary>
            DIO操作任务类
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405DITask.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="boardNum">板卡编号</param>
        </member>
        <member name="F:JYUSB62405.JYUSB62405DITask._deviceHandle">
            <summary>
            操作硬件的对象
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405DITask.Channels">
            <summary>
            通道列表
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405DITask.AddChannel(System.Int32)">
            <summary>
            添加通道
            </summary>
            <param name="lineNum">位号，从0开始。</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405DITask.AddChannel(System.Int32[])">
            <summary>
            添加通道
            </summary>
            <param name="lineNum">位号，从0开始。小于0则添加整个端口。</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405DITask.RemoveChannel(System.Int32)">
            <summary>
            删除指定端口号和位号的通道。位号小于0时表示删除指定端口号的所有通道。
            </summary>
            <param name="lineNum">端口中的位号,如果是null或在Length为0，则删除全部bit</param>
        </member>
        <member name="M:JYUSB62405.JYUSB62405DITask.Start">
            <summary>
            开始DI任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405DITask.Stop">
            <summary>
            停止DI任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405DITask.ReadSinglePoint(System.Boolean[]@)">
            <summary>
            每通道读取最新的一个点，非缓冲式读取。
            </summary>
            <param name="Buf">用户缓冲区数组。数组大小须不小于<see cref="!:_channels.count"/>。</param>
        </member>
        <member name="T:JYUSB62405.DIChannel">
            <summary>
            DIO通道参数类
            </summary>
        </member>
        <member name="P:JYUSB62405.DIChannel.LineNum">
            <summary>
            端口中的位号，从0开始。提供小于0的值，将获得值0.
            </summary>
        </member>
        <member name="M:JYUSB62405.DIChannel.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="lineNum">端口中的位号</param>
        </member>
        <member name="T:JYUSB62405.JYUSB62405DOTask">
            <summary>
            DIO操作任务类
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405DOTask.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="boardNum">板卡编号</param>
        </member>
        <member name="F:JYUSB62405.JYUSB62405DOTask._deviceHandle">
            <summary>
            操作硬件的对象
            </summary>
        </member>
        <member name="F:JYUSB62405.JYUSB62405DOTask._doStarted">
            <summary>
            DO是否已启动
            </summary>
        </member>
        <member name="P:JYUSB62405.JYUSB62405DOTask.Channels">
            <summary>
            通道列表
            </summary>
        </member>
        <member name="M:JYUSB62405.JYUSB62405DOTask.AddChannel(System.Int32)">
            <summary>
            添加通道
            </summary>
            <param name="lineNum">位号，从0开始。</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405DOTask.AddChannel(System.Int32[])">
            <summary>
            添加通道
            </summary>
            <param name="lineNum">位号，从0开始。</param>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405DOTask.RemoveChannel(System.Int32)">
            <summary>
            删除指定端口号和位号的通道。位号小于0时表示删除指定端口号的所有通道。
            </summary>
            <param name="lineNum">端口中的位号</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JYUSB62405.JYUSB62405DOTask.Start" -->
        <member name="M:JYUSB62405.JYUSB62405DOTask.Stop">
            <summary>
            停止D0任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:JYUSB62405.JYUSB62405DOTask.WriteSinglePoint(System.Boolean[])">
            <summary>
            每通道更新一个点, 非缓冲式更新。
            </summary>
            <param name="Buf">用户缓冲区数组, 数组大小须不小于<see cref="!:_channels.count"/></param>
            <remarks>用于软件定时DIO操作。</remarks>
        </member>
        <member name="T:JYUSB62405.DOChannel">
            <summary>
            DIO通道参数类
            </summary>
        </member>
        <member name="P:JYUSB62405.DOChannel.LineNum">
            <summary>
            端口中的位号，从0开始。提供小于0的值，将获得值0.
            </summary>
        </member>
        <member name="M:JYUSB62405.DOChannel.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="lineNum">端口中的位号</param>
        </member>
    </members>
</doc>
